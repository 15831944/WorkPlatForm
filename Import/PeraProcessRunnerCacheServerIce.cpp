// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `PeraProcessRunnerCacheServerIce.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//
#include "StdAfx.h"
#include <PeraProcessRunnerCacheServerIce.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

namespace
{

namespace
{

const ::std::string __pera__runner__assist__PeraWsAstICE__GetRunId_name = "GetRunId";

const ::std::string __pera__runner__assist__PeraWsAstICE__Stop_name = "Stop";

const ::std::string __pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name = "CreateCacheByWS";

const ::std::string __pera__runner__assist__PeraWsAstICE__CreateWSByCache_name = "CreateWSByCache";

const ::std::string __pera__runner__assist__PeraWsAstICE__CopyCache_name = "CopyCache";

const ::std::string __pera__runner__assist__PeraWsAstICE__DeleteCache_name = "DeleteCache";

const ::std::string __pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name = "CreateCacheByXpdlStream";

const ::std::string __pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name = "CreateWSByXpdlStream";

}

}

}

namespace
{

const char* __pera__runner__assist__InvokeException_name = "pera::runner::assist::InvokeException";

struct __F__pera__runner__assist__InvokeException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::pera::runner::assist::InvokeException();
    }
};

class __F__pera__runner__assist__InvokeException__Init
{
public:

    __F__pera__runner__assist__InvokeException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::pera::runner::assist::InvokeException", new __F__pera__runner__assist__InvokeException);
    }

    ~__F__pera__runner__assist__InvokeException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::pera::runner::assist::InvokeException");
    }
};

const __F__pera__runner__assist__InvokeException__Init __F__pera__runner__assist__InvokeException__i;

}

pera::runner::assist::InvokeException::InvokeException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

pera::runner::assist::InvokeException::~InvokeException() throw()
{
}

::std::string
pera::runner::assist::InvokeException::ice_name() const
{
    return __pera__runner__assist__InvokeException_name;
}

pera::runner::assist::InvokeException*
pera::runner::assist::InvokeException::ice_clone() const
{
    return new InvokeException(*this);
}

void
pera::runner::assist::InvokeException::ice_throw() const
{
    throw *this;
}

void
pera::runner::assist::InvokeException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::pera::runner::assist::InvokeException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
pera::runner::assist::InvokeException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}

IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByWS::AMD_PeraWsAstICE_CreateCacheByWS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByWS::ice_response(const ::std::string& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByWS::ice_exception(const ::std::exception& ex)
{
    if(const ::pera::runner::assist::InvokeException* __ex = dynamic_cast<const ::pera::runner::assist::InvokeException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByCache::AMD_PeraWsAstICE_CreateWSByCache(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByCache::ice_response(const ::std::string& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByCache::ice_exception(const ::std::exception& ex)
{
    if(const ::pera::runner::assist::InvokeException* __ex = dynamic_cast<const ::pera::runner::assist::InvokeException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CopyCache::AMD_PeraWsAstICE_CopyCache(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CopyCache::ice_response(const ::std::string& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CopyCache::ice_exception(const ::std::exception& ex)
{
    if(const ::pera::runner::assist::InvokeException* __ex = dynamic_cast<const ::pera::runner::assist::InvokeException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::pera::runner::assist::AMD_PeraWsAstICE_DeleteCache::AMD_PeraWsAstICE_DeleteCache(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_DeleteCache::ice_response(const ::std::string& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_DeleteCache::ice_exception(const ::std::exception& ex)
{
    if(const ::pera::runner::assist::InvokeException* __ex = dynamic_cast<const ::pera::runner::assist::InvokeException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByXpdlStream::AMD_PeraWsAstICE_CreateCacheByXpdlStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByXpdlStream::ice_response(const ::std::string& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByXpdlStream::ice_exception(const ::std::exception& ex)
{
    if(const ::pera::runner::assist::InvokeException* __ex = dynamic_cast<const ::pera::runner::assist::InvokeException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByXpdlStream::AMD_PeraWsAstICE_CreateWSByXpdlStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByXpdlStream::ice_response(const ::std::string& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByXpdlStream::ice_exception(const ::std::exception& ex)
{
    if(const ::pera::runner::assist::InvokeException* __ex = dynamic_cast<const ::pera::runner::assist::InvokeException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::pera::runner::assist::upCast(::IceProxy::pera::runner::assist::PeraWsAstICE* p) { return p; }

void
::IceProxy::pera::runner::assist::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::pera::runner::assist::PeraWsAstICE>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::pera::runner::assist::PeraWsAstICE;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::GetRunId(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__GetRunId_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__GetRunId_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->GetRunId(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_GetRunId(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__GetRunId_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__GetRunId_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__GetRunId_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_GetRunId(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__GetRunId_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::Stop(const ::std::string& sJsonString, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__Stop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__Stop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->Stop(sJsonString, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_Stop(const ::std::string& sJsonString, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__Stop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__Stop_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__Stop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_Stop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__Stop_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::CreateCacheByWS(const ::std::string& sJsonString, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->CreateCacheByWS(sJsonString, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_CreateCacheByWS(const ::std::string& sJsonString, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_CreateCacheByWS(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateCacheByWS_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWSPtr& __cb, const ::std::string& sJsonString)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateCacheByWSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByWS(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByWS(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name);
        __ar = begin_CreateCacheByWS(sJsonString, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateCacheByWS_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWSPtr& __cb, const ::std::string& sJsonString, const ::Ice::Context& __ctx)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateCacheByWSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByWS(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByWS(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByWS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name);
        __ar = begin_CreateCacheByWS(sJsonString, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::CreateWSByCache(const ::std::string& sJsonString, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__CreateWSByCache_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByCache_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->CreateWSByCache(sJsonString, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_CreateWSByCache(const ::std::string& sJsonString, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByCache_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateWSByCache_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__CreateWSByCache_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_CreateWSByCache(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__CreateWSByCache_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateWSByCache_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCachePtr& __cb, const ::std::string& sJsonString)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateWSByCachePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByCache_name);
        __ar = begin_CreateWSByCache(sJsonString, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateWSByCache_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateWSByCache_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCachePtr& __cb, const ::std::string& sJsonString, const ::Ice::Context& __ctx)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateWSByCachePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByCache::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByCache_name);
        __ar = begin_CreateWSByCache(sJsonString, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateWSByCache_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::CopyCache(const ::std::string& sJsonString, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__CopyCache_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CopyCache_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->CopyCache(sJsonString, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_CopyCache(const ::std::string& sJsonString, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__CopyCache_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CopyCache_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__CopyCache_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_CopyCache(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__CopyCache_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CopyCache_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CopyCachePtr& __cb, const ::std::string& sJsonString)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CopyCachePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CopyCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CopyCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CopyCache_name);
        __ar = begin_CopyCache(sJsonString, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CopyCache_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CopyCache_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CopyCachePtr& __cb, const ::std::string& sJsonString, const ::Ice::Context& __ctx)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CopyCachePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CopyCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CopyCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CopyCache::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CopyCache_name);
        __ar = begin_CopyCache(sJsonString, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CopyCache_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::DeleteCache(const ::std::string& sJsonString, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__DeleteCache_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__DeleteCache_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->DeleteCache(sJsonString, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_DeleteCache(const ::std::string& sJsonString, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__DeleteCache_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__DeleteCache_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__DeleteCache_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_DeleteCache(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__DeleteCache_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::DeleteCache_async(const ::pera::runner::assist::AMI_PeraWsAstICE_DeleteCachePtr& __cb, const ::std::string& sJsonString)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_DeleteCachePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_DeleteCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_DeleteCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__DeleteCache_name);
        __ar = begin_DeleteCache(sJsonString, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__DeleteCache_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::DeleteCache_async(const ::pera::runner::assist::AMI_PeraWsAstICE_DeleteCachePtr& __cb, const ::std::string& sJsonString, const ::Ice::Context& __ctx)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_DeleteCachePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_DeleteCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_DeleteCache(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__response, &::pera::runner::assist::AMI_PeraWsAstICE_DeleteCache::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__DeleteCache_name);
        __ar = begin_DeleteCache(sJsonString, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__DeleteCache_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::CreateCacheByXpdlStream(const ::std::string& sJsonString, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->CreateCacheByXpdlStream(sJsonString, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_CreateCacheByXpdlStream(const ::std::string& sJsonString, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_CreateCacheByXpdlStream(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateCacheByXpdlStream_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStreamPtr& __cb, const ::std::string& sJsonString)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateCacheByXpdlStreamPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name);
        __ar = begin_CreateCacheByXpdlStream(sJsonString, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateCacheByXpdlStream_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStreamPtr& __cb, const ::std::string& sJsonString, const ::Ice::Context& __ctx)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateCacheByXpdlStreamPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateCacheByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateCacheByXpdlStream::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name);
        __ar = begin_CreateCacheByXpdlStream(sJsonString, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::CreateWSByXpdlStream(const ::std::string& sJsonString, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pera::runner::assist::PeraWsAstICE* __del = dynamic_cast< ::IceDelegate::pera::runner::assist::PeraWsAstICE*>(__delBase.get());
            return __del->CreateWSByXpdlStream(sJsonString, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pera::runner::assist::PeraWsAstICE::begin_CreateWSByXpdlStream(const ::std::string& sJsonString, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name, __del, __cookie);
    try
    {
        __result->__prepare(__pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pera::runner::assist::PeraWsAstICE::end_CreateWSByXpdlStream(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateWSByXpdlStream_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStreamPtr& __cb, const ::std::string& sJsonString)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateWSByXpdlStreamPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name);
        __ar = begin_CreateWSByXpdlStream(sJsonString, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::pera::runner::assist::PeraWsAstICE::CreateWSByXpdlStream_async(const ::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStreamPtr& __cb, const ::std::string& sJsonString, const ::Ice::Context& __ctx)
{
    ::pera::runner::assist::Callback_PeraWsAstICE_CreateWSByXpdlStreamPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__exception, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__sent);
    }
    else
    {
         __del = ::pera::runner::assist::newCallback_PeraWsAstICE_CreateWSByXpdlStream(__cb, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__response, &::pera::runner::assist::AMI_PeraWsAstICE_CreateWSByXpdlStream::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name);
        __ar = begin_CreateWSByXpdlStream(sJsonString, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

const ::std::string&
IceProxy::pera::runner::assist::PeraWsAstICE::ice_staticId()
{
    return ::pera::runner::assist::PeraWsAstICE::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::pera::runner::assist::PeraWsAstICE::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::pera::runner::assist::PeraWsAstICE);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::pera::runner::assist::PeraWsAstICE::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::pera::runner::assist::PeraWsAstICE);
}

::IceProxy::Ice::Object*
IceProxy::pera::runner::assist::PeraWsAstICE::__newInstance() const
{
    return new PeraWsAstICE;
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::GetRunId(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__GetRunId_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::Stop(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__Stop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::CreateCacheByWS(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__CreateCacheByWS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::CreateWSByCache(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__CreateWSByCache_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::CopyCache(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__CopyCache_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::DeleteCache(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__DeleteCache_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::CreateCacheByXpdlStream(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__CreateCacheByXpdlStream_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pera::runner::assist::PeraWsAstICE::CreateWSByXpdlStream(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pera__runner__assist__PeraWsAstICE__CreateWSByXpdlStream_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sJsonString);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::pera::runner::assist::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::GetRunId(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pera::runner::assist::PeraWsAstICE* servant = dynamic_cast< ::pera::runner::assist::PeraWsAstICE*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetRunId(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pera__runner__assist__PeraWsAstICE__GetRunId_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::pera::runner::assist::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::Stop(const ::std::string& sJsonString, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_sJsonString, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_sJsonString(__p_sJsonString)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pera::runner::assist::PeraWsAstICE* servant = dynamic_cast< ::pera::runner::assist::PeraWsAstICE*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->Stop(_m_sJsonString, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_sJsonString;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pera__runner__assist__PeraWsAstICE__Stop_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, sJsonString, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::pera::runner::assist::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::CreateCacheByWS(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::std::string(); // to avoid a warning with some compilers;
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::CreateWSByCache(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::std::string(); // to avoid a warning with some compilers;
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::CopyCache(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::std::string(); // to avoid a warning with some compilers;
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::DeleteCache(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::std::string(); // to avoid a warning with some compilers;
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::CreateCacheByXpdlStream(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::std::string(); // to avoid a warning with some compilers;
}

::std::string
IceDelegateD::pera::runner::assist::PeraWsAstICE::CreateWSByXpdlStream(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::std::string(); // to avoid a warning with some compilers;
}

::Ice::Object* pera::runner::assist::upCast(::pera::runner::assist::PeraWsAstICE* p) { return p; }

namespace
{
const ::std::string __pera__runner__assist__PeraWsAstICE_ids[2] =
{
    "::Ice::Object",
    "::pera::runner::assist::PeraWsAstICE"
};

}

bool
pera::runner::assist::PeraWsAstICE::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__pera__runner__assist__PeraWsAstICE_ids, __pera__runner__assist__PeraWsAstICE_ids + 2, _s);
}

::std::vector< ::std::string>
pera::runner::assist::PeraWsAstICE::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__pera__runner__assist__PeraWsAstICE_ids[0], &__pera__runner__assist__PeraWsAstICE_ids[2]);
}

const ::std::string&
pera::runner::assist::PeraWsAstICE::ice_id(const ::Ice::Current&) const
{
    return __pera__runner__assist__PeraWsAstICE_ids[1];
}

const ::std::string&
pera::runner::assist::PeraWsAstICE::ice_staticId()
{
    return __pera__runner__assist__PeraWsAstICE_ids[1];
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___GetRunId(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::std::string __ret = GetRunId(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::pera::runner::assist::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___Stop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sJsonString;
    __is->read(sJsonString);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = Stop(sJsonString, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::pera::runner::assist::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___CreateCacheByWS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sJsonString;
    __is->read(sJsonString);
    __inS.endReadParams();
    ::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByWSPtr __cb = new IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByWS(__inS);
    try
    {
        CreateCacheByWS_async(__cb, sJsonString, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___CreateWSByCache(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sJsonString;
    __is->read(sJsonString);
    __inS.endReadParams();
    ::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByCachePtr __cb = new IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByCache(__inS);
    try
    {
        CreateWSByCache_async(__cb, sJsonString, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___CopyCache(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sJsonString;
    __is->read(sJsonString);
    __inS.endReadParams();
    ::pera::runner::assist::AMD_PeraWsAstICE_CopyCachePtr __cb = new IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CopyCache(__inS);
    try
    {
        CopyCache_async(__cb, sJsonString, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___DeleteCache(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sJsonString;
    __is->read(sJsonString);
    __inS.endReadParams();
    ::pera::runner::assist::AMD_PeraWsAstICE_DeleteCachePtr __cb = new IceAsync::pera::runner::assist::AMD_PeraWsAstICE_DeleteCache(__inS);
    try
    {
        DeleteCache_async(__cb, sJsonString, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___CreateCacheByXpdlStream(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sJsonString;
    __is->read(sJsonString);
    __inS.endReadParams();
    ::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByXpdlStreamPtr __cb = new IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateCacheByXpdlStream(__inS);
    try
    {
        CreateCacheByXpdlStream_async(__cb, sJsonString, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::___CreateWSByXpdlStream(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sJsonString;
    __is->read(sJsonString);
    __inS.endReadParams();
    ::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByXpdlStreamPtr __cb = new IceAsync::pera::runner::assist::AMD_PeraWsAstICE_CreateWSByXpdlStream(__inS);
    try
    {
        CreateWSByXpdlStream_async(__cb, sJsonString, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __pera__runner__assist__PeraWsAstICE_all[] =
{
    "CopyCache",
    "CreateCacheByWS",
    "CreateCacheByXpdlStream",
    "CreateWSByCache",
    "CreateWSByXpdlStream",
    "DeleteCache",
    "GetRunId",
    "Stop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
pera::runner::assist::PeraWsAstICE::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__pera__runner__assist__PeraWsAstICE_all, __pera__runner__assist__PeraWsAstICE_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __pera__runner__assist__PeraWsAstICE_all)
    {
        case 0:
        {
            return ___CopyCache(in, current);
        }
        case 1:
        {
            return ___CreateCacheByWS(in, current);
        }
        case 2:
        {
            return ___CreateCacheByXpdlStream(in, current);
        }
        case 3:
        {
            return ___CreateWSByCache(in, current);
        }
        case 4:
        {
            return ___CreateWSByXpdlStream(in, current);
        }
        case 5:
        {
            return ___DeleteCache(in, current);
        }
        case 6:
        {
            return ___GetRunId(in, current);
        }
        case 7:
        {
            return ___Stop(in, current);
        }
        case 8:
        {
            return ___ice_id(in, current);
        }
        case 9:
        {
            return ___ice_ids(in, current);
        }
        case 10:
        {
            return ___ice_isA(in, current);
        }
        case 11:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
pera::runner::assist::PeraWsAstICE::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
pera::runner::assist::PeraWsAstICE::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
pera::runner::assist::__patch(PeraWsAstICEPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::pera::runner::assist::PeraWsAstICEPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::pera::runner::assist::PeraWsAstICE::ice_staticId(), v);
    }
}
