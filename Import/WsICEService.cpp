// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `WsICEService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <StdAfx.h>
#include <WsICEService.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

namespace
{

namespace
{

namespace
{

namespace
{

const ::std::string __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name = "runRobotFinished";

const ::std::string __com__pera__base__runtime__remote__WsICEService__runRobotLog_name = "runRobotLog";

const ::std::string __com__pera__base__runtime__remote__WsICEService__runRobotRate_name = "runRobotRate";

const ::std::string __com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name = "invokeWsMethod";

const ::std::string __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name = "invokeLocalWsMethod";

const ::std::string __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name = "runLocalRobotFinished";

const ::std::string __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name = "runLocalRobotLog";

const ::std::string __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name = "runLocalRobotRate";

const ::std::string __com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name = "savePlanByByteXpdl";

}

}

}

}

}

namespace
{

const char* __com__pera__base__runtime__remote__InvokeException_name = "com::pera::base::runtime::remote::InvokeException";

struct __F__com__pera__base__runtime__remote__InvokeException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::com::pera::base::runtime::remote::InvokeException();
    }
};

class __F__com__pera__base__runtime__remote__InvokeException__Init
{
public:

    __F__com__pera__base__runtime__remote__InvokeException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::com::pera::base::runtime::remote::InvokeException", new __F__com__pera__base__runtime__remote__InvokeException);
    }

    ~__F__com__pera__base__runtime__remote__InvokeException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::com::pera::base::runtime::remote::InvokeException");
    }
};

const __F__com__pera__base__runtime__remote__InvokeException__Init __F__com__pera__base__runtime__remote__InvokeException__i;

}

com::pera::base::runtime::remote::InvokeException::InvokeException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

com::pera::base::runtime::remote::InvokeException::~InvokeException() throw()
{
}

::std::string
com::pera::base::runtime::remote::InvokeException::ice_name() const
{
    return __com__pera__base__runtime__remote__InvokeException_name;
}

com::pera::base::runtime::remote::InvokeException*
com::pera::base::runtime::remote::InvokeException::ice_clone() const
{
    return new InvokeException(*this);
}

void
com::pera::base::runtime::remote::InvokeException::ice_throw() const
{
    throw *this;
}

void
com::pera::base::runtime::remote::InvokeException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::com::pera::base::runtime::remote::InvokeException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
com::pera::base::runtime::remote::InvokeException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::com::pera::base::runtime::remote::upCast(::IceProxy::com::pera::base::runtime::remote::WsICEService* p) { return p; }

void
::IceProxy::com::pera::base::runtime::remote::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::com::pera::base::runtime::remote::WsICEService>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::com::pera::base::runtime::remote::WsICEService;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotFinished_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            return __del->runRobotFinished(taskId, outPutSvnPath, runType, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotFinished_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__runRobotFinished_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(taskId);
        __os->write(outPutSvnPath);
        __os->write(runType);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::end_runRobotFinished(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinishedPtr& __cb, const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotFinishedPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotFinished_name);
        __ar = begin_runRobotFinished(taskId, outPutSvnPath, runType, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinishedPtr& __cb, const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotFinishedPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotFinished_name);
        __ar = begin_runRobotFinished(taskId, outPutSvnPath, runType, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotLog(const ::std::string& logInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__runRobotLog_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotLog_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            __del->runRobotLog(logInfo, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_runRobotLog(const ::std::string& logInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotLog_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotLog_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__runRobotLog_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(logInfo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::end_runRobotLog(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__runRobotLog_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLogPtr& __cb, const ::std::string& logInfo)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotLogPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotLog_name);
        __ar = begin_runRobotLog(logInfo, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotLog_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLogPtr& __cb, const ::std::string& logInfo, const ::Ice::Context& __ctx)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotLogPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotLog_name);
        __ar = begin_runRobotLog(logInfo, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotLog_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__runRobotRate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotRate_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            __del->runRobotRate(rateInfo, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotRate_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotRate_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__runRobotRate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(rateInfo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::end_runRobotRate(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__runRobotRate_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRatePtr& __cb, const ::std::string& rateInfo)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotRatePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotRate_name);
        __ar = begin_runRobotRate(rateInfo, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotRate_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRatePtr& __cb, const ::std::string& rateInfo, const ::Ice::Context& __ctx)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotRatePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runRobotRate_name);
        __ar = begin_runRobotRate(rateInfo, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runRobotRate_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            return __del->invokeWsMethod(methodName, paramJsonArray, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(methodName);
        __os->write(paramJsonArray);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::end_invokeWsMethod(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            return __del->invokeLocalWsMethod(methodName, paramJsonObject, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(methodName);
        __os->write(paramJsonObject);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::end_invokeLocalWsMethod(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::invokeLocalWsMethod_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethodPtr& __cb, const ::std::string& methodName, const ::std::string& paramJsonObject)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_invokeLocalWsMethodPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_invokeLocalWsMethod(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_invokeLocalWsMethod(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name);
        __ar = begin_invokeLocalWsMethod(methodName, paramJsonObject, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::invokeLocalWsMethod_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethodPtr& __cb, const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context& __ctx)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_invokeLocalWsMethodPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_invokeLocalWsMethod(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_invokeLocalWsMethod(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name);
        __ar = begin_invokeLocalWsMethod(methodName, paramJsonObject, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            return __del->runLocalRobotFinished(taskId, outPutSvnPath, runType, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(taskId);
        __os->write(outPutSvnPath);
        __os->write(runType);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::end_runLocalRobotFinished(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinishedPtr& __cb, const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotFinishedPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name);
        __ar = begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinishedPtr& __cb, const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotFinishedPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotFinished(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name);
        __ar = begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            __del->runLocalRobotLog(logInfo, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(logInfo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::end_runLocalRobotLog(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLogPtr& __cb, const ::std::string& logInfo)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotLogPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name);
        __ar = begin_runLocalRobotLog(logInfo, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLogPtr& __cb, const ::std::string& logInfo, const ::Ice::Context& __ctx)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotLogPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotLog(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name);
        __ar = begin_runLocalRobotLog(logInfo, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            __del->runLocalRobotRate(rateInfo, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(rateInfo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::com::pera::base::runtime::remote::WsICEService::end_runLocalRobotRate(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRatePtr& __cb, const ::std::string& rateInfo)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotRatePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name);
        __ar = begin_runLocalRobotRate(rateInfo, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::com::pera::base::runtime::remote::WsICEService::runLocalRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRatePtr& __cb, const ::std::string& rateInfo, const ::Ice::Context& __ctx)
{
    ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotRatePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__exception, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__sent);
    }
    else
    {
         __del = ::com::pera::base::runtime::remote::newCallback_WsICEService_runLocalRobotRate(__cb, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__response, &::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name);
        __ar = begin_runLocalRobotRate(rateInfo, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::pera::base::runtime::remote::WsICEService* __del = dynamic_cast< ::IceDelegate::com::pera::base::runtime::remote::WsICEService*>(__delBase.get());
            return __del->savePlanByByteXpdl(jsonInfo, xpdlBytes, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::pera::base::runtime::remote::WsICEService::begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(jsonInfo);
        __os->write(xpdlBytes);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::com::pera::base::runtime::remote::WsICEService::end_savePlanByByteXpdl(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::com::pera::base::runtime::remote::WsICEService::ice_staticId()
{
    return ::com::pera::base::runtime::remote::WsICEService::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::com::pera::base::runtime::remote::WsICEService::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::com::pera::base::runtime::remote::WsICEService);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::com::pera::base::runtime::remote::WsICEService::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::com::pera::base::runtime::remote::WsICEService);
}

::IceProxy::Ice::Object*
IceProxy::com::pera::base::runtime::remote::WsICEService::__newInstance() const
{
    return new WsICEService;
}

::std::string
IceDelegateM::com::pera::base::runtime::remote::WsICEService::runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(taskId);
        __os->write(outPutSvnPath);
        __os->write(runType);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::com::pera::base::runtime::remote::WsICEService::runRobotLog(const ::std::string& logInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__runRobotLog_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(logInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::com::pera::base::runtime::remote::WsICEService::runRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__runRobotRate_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(rateInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::com::pera::base::runtime::remote::WsICEService::invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(methodName);
        __os->write(paramJsonArray);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::com::pera::base::runtime::remote::WsICEService::invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(methodName);
        __os->write(paramJsonObject);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::com::pera::base::runtime::remote::WsICEService::runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(taskId);
        __os->write(outPutSvnPath);
        __os->write(runType);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::com::pera::base::runtime::remote::WsICEService::runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(logInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::com::pera::base::runtime::remote::WsICEService::runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(rateInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::com::pera::base::runtime::remote::WsICEService::savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(jsonInfo);
        __os->write(xpdlBytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::pera::base::runtime::remote::InvokeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateD::com::pera::base::runtime::remote::WsICEService::runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_taskId, const ::std::string& __p_outPutSvnPath, const ::std::string& __p_runType, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_taskId(__p_taskId),
            _m_outPutSvnPath(__p_outPutSvnPath),
            _m_runType(__p_runType)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->runRobotFinished(_m_taskId, _m_outPutSvnPath, _m_runType, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_taskId;
        const ::std::string& _m_outPutSvnPath;
        const ::std::string& _m_runType;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__runRobotFinished_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, taskId, outPutSvnPath, runType, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::com::pera::base::runtime::remote::WsICEService::runRobotLog(const ::std::string& logInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_logInfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_logInfo(__p_logInfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->runRobotLog(_m_logInfo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_logInfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__runRobotLog_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(logInfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::com::pera::base::runtime::remote::WsICEService::runRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_rateInfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_rateInfo(__p_rateInfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->runRobotRate(_m_rateInfo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_rateInfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__runRobotRate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(rateInfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::com::pera::base::runtime::remote::WsICEService::invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_methodName, const ::std::string& __p_paramJsonArray, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_methodName(__p_methodName),
            _m_paramJsonArray(__p_paramJsonArray)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->invokeWsMethod(_m_methodName, _m_paramJsonArray, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_methodName;
        const ::std::string& _m_paramJsonArray;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__invokeWsMethod_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, methodName, paramJsonArray, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::com::pera::base::runtime::remote::WsICEService::invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_methodName, const ::std::string& __p_paramJsonObject, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_methodName(__p_methodName),
            _m_paramJsonObject(__p_paramJsonObject)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->invokeLocalWsMethod(_m_methodName, _m_paramJsonObject, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_methodName;
        const ::std::string& _m_paramJsonObject;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__invokeLocalWsMethod_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, methodName, paramJsonObject, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::com::pera::base::runtime::remote::WsICEService::runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_taskId, const ::std::string& __p_outPutSvnPath, const ::std::string& __p_runType, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_taskId(__p_taskId),
            _m_outPutSvnPath(__p_outPutSvnPath),
            _m_runType(__p_runType)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->runLocalRobotFinished(_m_taskId, _m_outPutSvnPath, _m_runType, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_taskId;
        const ::std::string& _m_outPutSvnPath;
        const ::std::string& _m_runType;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__runLocalRobotFinished_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, taskId, outPutSvnPath, runType, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::com::pera::base::runtime::remote::WsICEService::runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_logInfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_logInfo(__p_logInfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->runLocalRobotLog(_m_logInfo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_logInfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__runLocalRobotLog_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(logInfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::com::pera::base::runtime::remote::WsICEService::runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_rateInfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_rateInfo(__p_rateInfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->runLocalRobotRate(_m_rateInfo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_rateInfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__runLocalRobotRate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(rateInfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::com::pera::base::runtime::remote::WsICEService::savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& __p_xpdlBytes, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_jsonInfo(__p_jsonInfo),
            _m_xpdlBytes(__p_xpdlBytes)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::pera::base::runtime::remote::WsICEService* servant = dynamic_cast< ::com::pera::base::runtime::remote::WsICEService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->savePlanByByteXpdl(_m_jsonInfo, _m_xpdlBytes, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_jsonInfo;
        const ::com::pera::base::runtime::remote::ByteSeq& _m_xpdlBytes;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__pera__base__runtime__remote__WsICEService__savePlanByByteXpdl_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, jsonInfo, xpdlBytes, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* com::pera::base::runtime::remote::upCast(::com::pera::base::runtime::remote::WsICEService* p) { return p; }

namespace
{
const ::std::string __com__pera__base__runtime__remote__WsICEService_ids[2] =
{
    "::Ice::Object",
    "::com::pera::base::runtime::remote::WsICEService"
};

}

bool
com::pera::base::runtime::remote::WsICEService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__com__pera__base__runtime__remote__WsICEService_ids, __com__pera__base__runtime__remote__WsICEService_ids + 2, _s);
}

::std::vector< ::std::string>
com::pera::base::runtime::remote::WsICEService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__com__pera__base__runtime__remote__WsICEService_ids[0], &__com__pera__base__runtime__remote__WsICEService_ids[2]);
}

const ::std::string&
com::pera::base::runtime::remote::WsICEService::ice_id(const ::Ice::Current&) const
{
    return __com__pera__base__runtime__remote__WsICEService_ids[1];
}

const ::std::string&
com::pera::base::runtime::remote::WsICEService::ice_staticId()
{
    return __com__pera__base__runtime__remote__WsICEService_ids[1];
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___runRobotFinished(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string taskId;
    ::std::string outPutSvnPath;
    ::std::string runType;
    __is->read(taskId);
    __is->read(outPutSvnPath);
    __is->read(runType);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = runRobotFinished(taskId, outPutSvnPath, runType, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___runRobotLog(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string logInfo;
    __is->read(logInfo);
    __inS.endReadParams();
    try
    {
        runRobotLog(logInfo, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___runRobotRate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string rateInfo;
    __is->read(rateInfo);
    __inS.endReadParams();
    try
    {
        runRobotRate(rateInfo, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___invokeWsMethod(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string methodName;
    ::std::string paramJsonArray;
    __is->read(methodName);
    __is->read(paramJsonArray);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = invokeWsMethod(methodName, paramJsonArray, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___invokeLocalWsMethod(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string methodName;
    ::std::string paramJsonObject;
    __is->read(methodName);
    __is->read(paramJsonObject);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = invokeLocalWsMethod(methodName, paramJsonObject, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___runLocalRobotFinished(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string taskId;
    ::std::string outPutSvnPath;
    ::std::string runType;
    __is->read(taskId);
    __is->read(outPutSvnPath);
    __is->read(runType);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = runLocalRobotFinished(taskId, outPutSvnPath, runType, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___runLocalRobotLog(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string logInfo;
    __is->read(logInfo);
    __inS.endReadParams();
    try
    {
        runLocalRobotLog(logInfo, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___runLocalRobotRate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string rateInfo;
    __is->read(rateInfo);
    __inS.endReadParams();
    try
    {
        runLocalRobotRate(rateInfo, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::___savePlanByByteXpdl(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string jsonInfo;
    ::com::pera::base::runtime::remote::ByteSeq xpdlBytes;
    __is->read(jsonInfo);
    __is->read(xpdlBytes);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = savePlanByByteXpdl(jsonInfo, xpdlBytes, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::com::pera::base::runtime::remote::InvokeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __com__pera__base__runtime__remote__WsICEService_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "invokeLocalWsMethod",
    "invokeWsMethod",
    "runLocalRobotFinished",
    "runLocalRobotLog",
    "runLocalRobotRate",
    "runRobotFinished",
    "runRobotLog",
    "runRobotRate",
    "savePlanByByteXpdl"
};

}

::Ice::DispatchStatus
com::pera::base::runtime::remote::WsICEService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__com__pera__base__runtime__remote__WsICEService_all, __com__pera__base__runtime__remote__WsICEService_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __com__pera__base__runtime__remote__WsICEService_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___invokeLocalWsMethod(in, current);
        }
        case 5:
        {
            return ___invokeWsMethod(in, current);
        }
        case 6:
        {
            return ___runLocalRobotFinished(in, current);
        }
        case 7:
        {
            return ___runLocalRobotLog(in, current);
        }
        case 8:
        {
            return ___runLocalRobotRate(in, current);
        }
        case 9:
        {
            return ___runRobotFinished(in, current);
        }
        case 10:
        {
            return ___runRobotLog(in, current);
        }
        case 11:
        {
            return ___runRobotRate(in, current);
        }
        case 12:
        {
            return ___savePlanByByteXpdl(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
com::pera::base::runtime::remote::WsICEService::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
com::pera::base::runtime::remote::WsICEService::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
com::pera::base::runtime::remote::__patch(WsICEServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::com::pera::base::runtime::remote::WsICEServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::com::pera::base::runtime::remote::WsICEService::ice_staticId(), v);
    }
}
