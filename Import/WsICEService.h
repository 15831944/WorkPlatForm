// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `WsICEService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __WsICEService_h__
#define __WsICEService_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class WsICEService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::com::pera::base::runtime::remote::WsICEService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::com::pera::base::runtime::remote::WsICEService*);

}

}

}

}

}

}

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class WsICEService;
bool operator==(const WsICEService&, const WsICEService&);
bool operator<(const WsICEService&, const WsICEService&);
::Ice::Object* upCast(::com::pera::base::runtime::remote::WsICEService*);
typedef ::IceInternal::Handle< ::com::pera::base::runtime::remote::WsICEService> WsICEServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::com::pera::base::runtime::remote::WsICEService> WsICEServicePrx;
void __patch(WsICEServicePtr&, const ::Ice::ObjectPtr&);

}

}

}

}

}

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class InvokeException : public ::Ice::UserException
{
public:

    InvokeException() {}
    explicit InvokeException(const ::std::string&);
    virtual ~InvokeException() throw();

    virtual ::std::string ice_name() const;
    virtual InvokeException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static InvokeException __InvokeException_init;

typedef ::std::vector< ::Ice::Byte> ByteSeq;

}

}

}

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::com::pera::base::runtime::remote::InvokeException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class AMI_WsICEService_runRobotFinished : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinished> AMI_WsICEService_runRobotFinishedPtr;

class AMI_WsICEService_runRobotLog : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLog> AMI_WsICEService_runRobotLogPtr;

class AMI_WsICEService_runRobotRate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRate> AMI_WsICEService_runRobotRatePtr;

class AMI_WsICEService_invokeLocalWsMethod : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethod> AMI_WsICEService_invokeLocalWsMethodPtr;

class AMI_WsICEService_runLocalRobotFinished : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinished> AMI_WsICEService_runLocalRobotFinishedPtr;

class AMI_WsICEService_runLocalRobotLog : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLog> AMI_WsICEService_runLocalRobotLogPtr;

class AMI_WsICEService_runLocalRobotRate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRate> AMI_WsICEService_runLocalRobotRatePtr;

}

}

}

}

}

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class Callback_WsICEService_runRobotFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_runRobotFinished_Base> Callback_WsICEService_runRobotFinishedPtr;

class Callback_WsICEService_runRobotLog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_runRobotLog_Base> Callback_WsICEService_runRobotLogPtr;

class Callback_WsICEService_runRobotRate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_runRobotRate_Base> Callback_WsICEService_runRobotRatePtr;

class Callback_WsICEService_invokeWsMethod_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_invokeWsMethod_Base> Callback_WsICEService_invokeWsMethodPtr;

class Callback_WsICEService_invokeLocalWsMethod_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_invokeLocalWsMethod_Base> Callback_WsICEService_invokeLocalWsMethodPtr;

class Callback_WsICEService_runLocalRobotFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_runLocalRobotFinished_Base> Callback_WsICEService_runLocalRobotFinishedPtr;

class Callback_WsICEService_runLocalRobotLog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_runLocalRobotLog_Base> Callback_WsICEService_runLocalRobotLogPtr;

class Callback_WsICEService_runLocalRobotRate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_runLocalRobotRate_Base> Callback_WsICEService_runLocalRobotRatePtr;

class Callback_WsICEService_savePlanByByteXpdl_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WsICEService_savePlanByByteXpdl_Base> Callback_WsICEService_savePlanByByteXpdlPtr;

}

}

}

}

}

namespace IceProxy
{

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class WsICEService : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType)
    {
        return runRobotFinished(taskId, outPutSvnPath, runType, 0);
    }
    ::std::string runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx)
    {
        return runRobotFinished(taskId, outPutSvnPath, runType, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runRobotFinished(taskId, outPutSvnPath, runType, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runRobotFinished(taskId, outPutSvnPath, runType, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_runRobotFinished(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType)
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx)
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotFinished(taskId, outPutSvnPath, runType, &__ctx, __del, __cookie);
    }

    ::std::string end_runRobotFinished(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string runRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_runRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool runRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinishedPtr&, const ::std::string&, const ::std::string&, const ::std::string&);
    bool runRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotFinishedPtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void runRobotLog(const ::std::string& logInfo)
    {
        runRobotLog(logInfo, 0);
    }
    void runRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx)
    {
        runRobotLog(logInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_runRobotLog(const ::std::string& logInfo, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runRobotLog(logInfo, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotLog(const ::std::string& logInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runRobotLog(logInfo, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotLog(const ::std::string& logInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runRobotLog(logInfo, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotLog(const ::std::string& logInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runRobotLog(logInfo, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_runRobotLog(const ::std::string& logInfo, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_runRobotLog(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_runRobotLog(logInfo, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_runRobotLog(const ::std::string& logInfo)
    {
        return begin_runRobotLog(logInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx)
    {
        return begin_runRobotLog(logInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runRobotLog(const ::std::string& logInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotLog(logInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotLog(logInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotLog(const ::std::string& logInfo, const ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotLog(logInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotLog(logInfo, &__ctx, __del, __cookie);
    }

    void end_runRobotLog(const ::Ice::AsyncResultPtr&);
    
private:

    void runRobotLog(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_runRobotLog(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool runRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLogPtr&, const ::std::string&);
    bool runRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotLogPtr&, const ::std::string&, const ::Ice::Context&);

    void runRobotRate(const ::std::string& rateInfo)
    {
        runRobotRate(rateInfo, 0);
    }
    void runRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx)
    {
        runRobotRate(rateInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_runRobotRate(const ::std::string& rateInfo, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runRobotRate(rateInfo, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotRate(const ::std::string& rateInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runRobotRate(rateInfo, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runRobotRate(rateInfo, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runRobotRate(rateInfo, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_runRobotRate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_runRobotRate(rateInfo, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_runRobotRate(const ::std::string& rateInfo)
    {
        return begin_runRobotRate(rateInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx)
    {
        return begin_runRobotRate(rateInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotRate(rateInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotRate(rateInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotRate(const ::std::string& rateInfo, const ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotRate(rateInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_runRobotRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runRobotRate(rateInfo, &__ctx, __del, __cookie);
    }

    void end_runRobotRate(const ::Ice::AsyncResultPtr&);
    
private:

    void runRobotRate(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_runRobotRate(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool runRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRatePtr&, const ::std::string&);
    bool runRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runRobotRatePtr&, const ::std::string&, const ::Ice::Context&);

    ::std::string invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray)
    {
        return invokeWsMethod(methodName, paramJsonArray, 0);
    }
    ::std::string invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context& __ctx)
    {
        return invokeWsMethod(methodName, paramJsonArray, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invokeWsMethod(methodName, paramJsonArray, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invokeWsMethod(methodName, paramJsonArray, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_invokeWsMethod(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_invokeWsMethod(methodName, paramJsonArray, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray)
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context& __ctx)
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::com::pera::base::runtime::remote::Callback_WsICEService_invokeWsMethodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invokeWsMethod(const ::std::string& methodName, const ::std::string& paramJsonArray, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_invokeWsMethodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeWsMethod(methodName, paramJsonArray, &__ctx, __del, __cookie);
    }

    ::std::string end_invokeWsMethod(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string invokeWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_invokeWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject)
    {
        return invokeLocalWsMethod(methodName, paramJsonObject, 0);
    }
    ::std::string invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context& __ctx)
    {
        return invokeLocalWsMethod(methodName, paramJsonObject, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invokeLocalWsMethod(methodName, paramJsonObject, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invokeLocalWsMethod(methodName, paramJsonObject, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_invokeLocalWsMethod(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject)
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context& __ctx)
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::com::pera::base::runtime::remote::Callback_WsICEService_invokeLocalWsMethodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invokeLocalWsMethod(const ::std::string& methodName, const ::std::string& paramJsonObject, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_invokeLocalWsMethodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invokeLocalWsMethod(methodName, paramJsonObject, &__ctx, __del, __cookie);
    }

    ::std::string end_invokeLocalWsMethod(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string invokeLocalWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_invokeLocalWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool invokeLocalWsMethod_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethodPtr&, const ::std::string&, const ::std::string&);
    bool invokeLocalWsMethod_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_invokeLocalWsMethodPtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::std::string runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType)
    {
        return runLocalRobotFinished(taskId, outPutSvnPath, runType, 0);
    }
    ::std::string runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx)
    {
        return runLocalRobotFinished(taskId, outPutSvnPath, runType, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_runLocalRobotFinished(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType)
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx)
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotFinished(const ::std::string& taskId, const ::std::string& outPutSvnPath, const ::std::string& runType, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotFinished(taskId, outPutSvnPath, runType, &__ctx, __del, __cookie);
    }

    ::std::string end_runLocalRobotFinished(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string runLocalRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_runLocalRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool runLocalRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinishedPtr&, const ::std::string&, const ::std::string&, const ::std::string&);
    bool runLocalRobotFinished_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotFinishedPtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void runLocalRobotLog(const ::std::string& logInfo)
    {
        runLocalRobotLog(logInfo, 0);
    }
    void runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx)
    {
        runLocalRobotLog(logInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_runLocalRobotLog(const ::std::string& logInfo, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runLocalRobotLog(logInfo, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotLog(const ::std::string& logInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runLocalRobotLog(logInfo, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runLocalRobotLog(logInfo, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runLocalRobotLog(logInfo, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_runLocalRobotLog(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_runLocalRobotLog(logInfo, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_runLocalRobotLog(const ::std::string& logInfo)
    {
        return begin_runLocalRobotLog(logInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx)
    {
        return begin_runLocalRobotLog(logInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotLog(logInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotLog(logInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotLog(const ::std::string& logInfo, const ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotLog(logInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotLog(const ::std::string& logInfo, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotLog(logInfo, &__ctx, __del, __cookie);
    }

    void end_runLocalRobotLog(const ::Ice::AsyncResultPtr&);
    
private:

    void runLocalRobotLog(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_runLocalRobotLog(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool runLocalRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLogPtr&, const ::std::string&);
    bool runLocalRobotLog_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotLogPtr&, const ::std::string&, const ::Ice::Context&);

    void runLocalRobotRate(const ::std::string& rateInfo)
    {
        runLocalRobotRate(rateInfo, 0);
    }
    void runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx)
    {
        runLocalRobotRate(rateInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_runLocalRobotRate(const ::std::string& rateInfo, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runLocalRobotRate(rateInfo, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotRate(const ::std::string& rateInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runLocalRobotRate(rateInfo, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_runLocalRobotRate(rateInfo, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_runLocalRobotRate(rateInfo, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_runLocalRobotRate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_runLocalRobotRate(rateInfo, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_runLocalRobotRate(const ::std::string& rateInfo)
    {
        return begin_runLocalRobotRate(rateInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx)
    {
        return begin_runLocalRobotRate(rateInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotRate(rateInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotRate(rateInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotRate(const ::std::string& rateInfo, const ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotRate(rateInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_runLocalRobotRate(const ::std::string& rateInfo, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_runLocalRobotRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_runLocalRobotRate(rateInfo, &__ctx, __del, __cookie);
    }

    void end_runLocalRobotRate(const ::Ice::AsyncResultPtr&);
    
private:

    void runLocalRobotRate(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_runLocalRobotRate(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool runLocalRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRatePtr&, const ::std::string&);
    bool runLocalRobotRate_async(const ::com::pera::base::runtime::remote::AMI_WsICEService_runLocalRobotRatePtr&, const ::std::string&, const ::Ice::Context&);

    ::std::string savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes)
    {
        return savePlanByByteXpdl(jsonInfo, xpdlBytes, 0);
    }
    ::std::string savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context& __ctx)
    {
        return savePlanByByteXpdl(jsonInfo, xpdlBytes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_savePlanByByteXpdl(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes)
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context& __ctx)
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::com::pera::base::runtime::remote::Callback_WsICEService_savePlanByByteXpdlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_savePlanByByteXpdl(const ::std::string& jsonInfo, const ::com::pera::base::runtime::remote::ByteSeq& xpdlBytes, const ::Ice::Context& __ctx, const ::com::pera::base::runtime::remote::Callback_WsICEService_savePlanByByteXpdlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_savePlanByByteXpdl(jsonInfo, xpdlBytes, &__ctx, __del, __cookie);
    }

    ::std::string end_savePlanByByteXpdl(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string savePlanByByteXpdl(const ::std::string&, const ::com::pera::base::runtime::remote::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_savePlanByByteXpdl(const ::std::string&, const ::com::pera::base::runtime::remote::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<WsICEService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_secure(bool __secure) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_twoway() const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_oneway() const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_batchOneway() const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_datagram() const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_batchDatagram() const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_compress(bool __compress) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WsICEService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<WsICEService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

}

}

}

namespace IceDelegate
{

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class WsICEService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string runRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void runRobotLog(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void runRobotRate(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string invokeWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string invokeLocalWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string runLocalRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void runLocalRobotLog(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void runLocalRobotRate(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string savePlanByByteXpdl(const ::std::string&, const ::com::pera::base::runtime::remote::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

}

}

}

namespace IceDelegateM
{

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class WsICEService : virtual public ::IceDelegate::com::pera::base::runtime::remote::WsICEService,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string runRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runRobotLog(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runRobotRate(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string invokeWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string invokeLocalWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string runLocalRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runLocalRobotLog(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runLocalRobotRate(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string savePlanByByteXpdl(const ::std::string&, const ::com::pera::base::runtime::remote::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

}

}

}

namespace IceDelegateD
{

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class WsICEService : virtual public ::IceDelegate::com::pera::base::runtime::remote::WsICEService,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string runRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runRobotLog(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runRobotRate(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string invokeWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string invokeLocalWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string runLocalRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runLocalRobotLog(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void runLocalRobotRate(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string savePlanByByteXpdl(const ::std::string&, const ::com::pera::base::runtime::remote::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

}

}

}

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

class WsICEService : virtual public ::Ice::Object
{
public:

    typedef WsICEServicePrx ProxyType;
    typedef WsICEServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string runRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___runRobotFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void runRobotLog(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___runRobotLog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void runRobotRate(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___runRobotRate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string invokeWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___invokeWsMethod(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string invokeLocalWsMethod(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___invokeLocalWsMethod(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string runLocalRobotFinished(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___runLocalRobotFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void runLocalRobotLog(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___runLocalRobotLog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void runLocalRobotRate(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___runLocalRobotRate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string savePlanByByteXpdl(const ::std::string&, const ::com::pera::base::runtime::remote::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___savePlanByByteXpdl(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const WsICEService& l, const WsICEService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WsICEService& l, const WsICEService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

}

}

}

namespace com
{

namespace pera
{

namespace base
{

namespace runtime
{

namespace remote
{

template<class T>
class CallbackNC_WsICEService_runRobotFinished : public Callback_WsICEService_runRobotFinished_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_WsICEService_runRobotFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_runRobotFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_runRobotFinishedPtr
newCallback_WsICEService_runRobotFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runRobotFinishedPtr
newCallback_WsICEService_runRobotFinished(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotFinished<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_runRobotFinished : public Callback_WsICEService_runRobotFinished_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_WsICEService_runRobotFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_runRobotFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_runRobotFinishedPtr
newCallback_WsICEService_runRobotFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runRobotFinishedPtr
newCallback_WsICEService_runRobotFinished(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_runRobotLog : public Callback_WsICEService_runRobotLog_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WsICEService_runRobotLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runRobotLog(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotLog<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotLog<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_runRobotLog : public Callback_WsICEService_runRobotLog_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WsICEService_runRobotLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runRobotLog(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runRobotLogPtr
newCallback_WsICEService_runRobotLog(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_runRobotRate : public Callback_WsICEService_runRobotRate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WsICEService_runRobotRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runRobotRate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotRate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotRate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotRate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runRobotRate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_runRobotRate : public Callback_WsICEService_runRobotRate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WsICEService_runRobotRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runRobotRate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotRate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runRobotRatePtr
newCallback_WsICEService_runRobotRate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runRobotRate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_invokeWsMethod : public Callback_WsICEService_invokeWsMethod_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_WsICEService_invokeWsMethod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_invokeWsMethod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_invokeWsMethodPtr
newCallback_WsICEService_invokeWsMethod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_invokeWsMethod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_invokeWsMethodPtr
newCallback_WsICEService_invokeWsMethod(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_invokeWsMethod<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_invokeWsMethod : public Callback_WsICEService_invokeWsMethod_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_WsICEService_invokeWsMethod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_invokeWsMethod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_invokeWsMethodPtr
newCallback_WsICEService_invokeWsMethod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_invokeWsMethod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_invokeWsMethodPtr
newCallback_WsICEService_invokeWsMethod(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_invokeWsMethod<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_invokeLocalWsMethod : public Callback_WsICEService_invokeLocalWsMethod_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_WsICEService_invokeLocalWsMethod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_invokeLocalWsMethod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_invokeLocalWsMethodPtr
newCallback_WsICEService_invokeLocalWsMethod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_invokeLocalWsMethod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_invokeLocalWsMethodPtr
newCallback_WsICEService_invokeLocalWsMethod(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_invokeLocalWsMethod<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_invokeLocalWsMethod : public Callback_WsICEService_invokeLocalWsMethod_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_WsICEService_invokeLocalWsMethod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_invokeLocalWsMethod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_invokeLocalWsMethodPtr
newCallback_WsICEService_invokeLocalWsMethod(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_invokeLocalWsMethod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_invokeLocalWsMethodPtr
newCallback_WsICEService_invokeLocalWsMethod(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_invokeLocalWsMethod<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_runLocalRobotFinished : public Callback_WsICEService_runLocalRobotFinished_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_WsICEService_runLocalRobotFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_runLocalRobotFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_runLocalRobotFinishedPtr
newCallback_WsICEService_runLocalRobotFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runLocalRobotFinishedPtr
newCallback_WsICEService_runLocalRobotFinished(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotFinished<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_runLocalRobotFinished : public Callback_WsICEService_runLocalRobotFinished_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_WsICEService_runLocalRobotFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_runLocalRobotFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_runLocalRobotFinishedPtr
newCallback_WsICEService_runLocalRobotFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runLocalRobotFinishedPtr
newCallback_WsICEService_runLocalRobotFinished(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_runLocalRobotLog : public Callback_WsICEService_runLocalRobotLog_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WsICEService_runLocalRobotLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runLocalRobotLog(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotLog<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotLog<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_runLocalRobotLog : public Callback_WsICEService_runLocalRobotLog_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WsICEService_runLocalRobotLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runLocalRobotLog(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runLocalRobotLogPtr
newCallback_WsICEService_runLocalRobotLog(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_runLocalRobotRate : public Callback_WsICEService_runLocalRobotRate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WsICEService_runLocalRobotRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runLocalRobotRate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotRate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotRate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotRate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_runLocalRobotRate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_runLocalRobotRate : public Callback_WsICEService_runLocalRobotRate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WsICEService_runLocalRobotRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_runLocalRobotRate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotRate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_runLocalRobotRatePtr
newCallback_WsICEService_runLocalRobotRate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_runLocalRobotRate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WsICEService_savePlanByByteXpdl : public Callback_WsICEService_savePlanByByteXpdl_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_WsICEService_savePlanByByteXpdl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_savePlanByByteXpdl(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WsICEService_savePlanByByteXpdlPtr
newCallback_WsICEService_savePlanByByteXpdl(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_savePlanByByteXpdl<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WsICEService_savePlanByByteXpdlPtr
newCallback_WsICEService_savePlanByByteXpdl(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WsICEService_savePlanByByteXpdl<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WsICEService_savePlanByByteXpdl : public Callback_WsICEService_savePlanByByteXpdl_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_WsICEService_savePlanByByteXpdl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::pera::base::runtime::remote::WsICEServicePrx __proxy = ::com::pera::base::runtime::remote::WsICEServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_savePlanByByteXpdl(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WsICEService_savePlanByByteXpdlPtr
newCallback_WsICEService_savePlanByByteXpdl(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_savePlanByByteXpdl<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WsICEService_savePlanByByteXpdlPtr
newCallback_WsICEService_savePlanByByteXpdl(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WsICEService_savePlanByByteXpdl<T, CT>(instance, cb, excb, sentcb);
}

}

}

}

}

}

#endif
