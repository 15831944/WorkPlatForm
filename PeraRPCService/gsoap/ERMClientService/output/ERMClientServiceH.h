/* ERMClientServiceH.h
   Generated by gSOAP 2.8.17r from ERMClientService.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef ERMClientServiceH_H
#define ERMClientServiceH_H
#include "ERMClientServiceStub.h"

namespace ERMClientService {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 ERMClientService_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 ERMClientService_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 ERMClientService_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService_byte
#define SOAP_TYPE_ERMClientService_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_byte(soap, data),0) || ERMClientService::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ERMClientService_int
#define SOAP_TYPE_ERMClientService_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_int(soap, data),0) || ERMClientService::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ERMClientService_std__string
#define SOAP_TYPE_ERMClientService_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_SOAP_ENV__Fault
#define SOAP_TYPE_ERMClientService_SOAP_ENV__Fault (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_SOAP_ENV__Fault(soap, data),0) || ERMClientService::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_SOAP_ENV__Reason
#define SOAP_TYPE_ERMClientService_SOAP_ENV__Reason (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_SOAP_ENV__Reason(soap, data),0) || ERMClientService::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_SOAP_ENV__Detail
#define SOAP_TYPE_ERMClientService_SOAP_ENV__Detail (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_SOAP_ENV__Detail(soap, data),0) || ERMClientService::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_SOAP_ENV__Code
#define SOAP_TYPE_ERMClientService_SOAP_ENV__Code (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_SOAP_ENV__Code(soap, data),0) || ERMClientService::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_SOAP_ENV__Header
#define SOAP_TYPE_ERMClientService_SOAP_ENV__Header (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_SOAP_ENV__Header(soap, data),0) || ERMClientService::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__getUserByUserName
#define SOAP_TYPE_ERMClientService___ERMClientService1__getUserByUserName (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__getUserByUserName(struct soap*, struct __ERMClientService1__getUserByUserName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__getUserByUserName(struct soap*, const struct __ERMClientService1__getUserByUserName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__getUserByUserName(struct soap*, const char*, int, const struct __ERMClientService1__getUserByUserName *, const char*);
SOAP_FMAC3 struct __ERMClientService1__getUserByUserName * SOAP_FMAC4 soap_in___ERMClientService1__getUserByUserName(struct soap*, const char*, struct __ERMClientService1__getUserByUserName *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__getUserByUserName(struct soap*, const struct __ERMClientService1__getUserByUserName *, const char*, const char*);

#ifndef soap_write___ERMClientService1__getUserByUserName
#define soap_write___ERMClientService1__getUserByUserName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__getUserByUserName(soap, data),0) || ERMClientService::soap_put___ERMClientService1__getUserByUserName(soap, data, "-ERMClientService1:getUserByUserName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__getUserByUserName * SOAP_FMAC4 soap_get___ERMClientService1__getUserByUserName(struct soap*, struct __ERMClientService1__getUserByUserName *, const char*, const char*);

#ifndef soap_read___ERMClientService1__getUserByUserName
#define soap_read___ERMClientService1__getUserByUserName(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__getUserByUserName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__getUserByUserName * SOAP_FMAC2 soap_instantiate___ERMClientService1__getUserByUserName(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__getUserByUserName * soap_new___ERMClientService1__getUserByUserName(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__getUserByUserName(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__getUserByUserName * soap_new_req___ERMClientService1__getUserByUserName(struct soap *soap, std::string& ERMClientService1__getUserByUserName) { struct __ERMClientService1__getUserByUserName *_p = soap_instantiate___ERMClientService1__getUserByUserName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__getUserByUserName(soap, _p); _p->ERMClientService1__getUserByUserName = ERMClientService1__getUserByUserName; } return _p; }

inline struct __ERMClientService1__getUserByUserName * soap_new_set___ERMClientService1__getUserByUserName(struct soap *soap, std::string& ERMClientService1__getUserByUserName) { struct __ERMClientService1__getUserByUserName *_p = soap_instantiate___ERMClientService1__getUserByUserName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__getUserByUserName(soap, _p); _p->ERMClientService1__getUserByUserName = ERMClientService1__getUserByUserName; } return _p; }

inline void soap_delete___ERMClientService1__getUserByUserName(struct soap *soap, struct __ERMClientService1__getUserByUserName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__getUserByUserName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__getUserByUserNameResponse
#define SOAP_TYPE_ERMClientService___ERMClientService1__getUserByUserNameResponse (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__getUserByUserNameResponse(struct soap*, struct __ERMClientService1__getUserByUserNameResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__getUserByUserNameResponse(struct soap*, const struct __ERMClientService1__getUserByUserNameResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__getUserByUserNameResponse(struct soap*, const char*, int, const struct __ERMClientService1__getUserByUserNameResponse *, const char*);
SOAP_FMAC3 struct __ERMClientService1__getUserByUserNameResponse * SOAP_FMAC4 soap_in___ERMClientService1__getUserByUserNameResponse(struct soap*, const char*, struct __ERMClientService1__getUserByUserNameResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__getUserByUserNameResponse(struct soap*, const struct __ERMClientService1__getUserByUserNameResponse *, const char*, const char*);

#ifndef soap_write___ERMClientService1__getUserByUserNameResponse
#define soap_write___ERMClientService1__getUserByUserNameResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__getUserByUserNameResponse(soap, data),0) || ERMClientService::soap_put___ERMClientService1__getUserByUserNameResponse(soap, data, "-ERMClientService1:getUserByUserNameResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__getUserByUserNameResponse * SOAP_FMAC4 soap_get___ERMClientService1__getUserByUserNameResponse(struct soap*, struct __ERMClientService1__getUserByUserNameResponse *, const char*, const char*);

#ifndef soap_read___ERMClientService1__getUserByUserNameResponse
#define soap_read___ERMClientService1__getUserByUserNameResponse(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__getUserByUserNameResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__getUserByUserNameResponse * SOAP_FMAC2 soap_instantiate___ERMClientService1__getUserByUserNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__getUserByUserNameResponse * soap_new___ERMClientService1__getUserByUserNameResponse(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__getUserByUserNameResponse(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__getUserByUserNameResponse * soap_new_req___ERMClientService1__getUserByUserNameResponse(struct soap *soap, std::string& ERMClientService1__getUserByUserNameResponse) { struct __ERMClientService1__getUserByUserNameResponse *_p = soap_instantiate___ERMClientService1__getUserByUserNameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__getUserByUserNameResponse(soap, _p); _p->ERMClientService1__getUserByUserNameResponse = ERMClientService1__getUserByUserNameResponse; } return _p; }

inline struct __ERMClientService1__getUserByUserNameResponse * soap_new_set___ERMClientService1__getUserByUserNameResponse(struct soap *soap, std::string& ERMClientService1__getUserByUserNameResponse) { struct __ERMClientService1__getUserByUserNameResponse *_p = soap_instantiate___ERMClientService1__getUserByUserNameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__getUserByUserNameResponse(soap, _p); _p->ERMClientService1__getUserByUserNameResponse = ERMClientService1__getUserByUserNameResponse; } return _p; }

inline void soap_delete___ERMClientService1__getUserByUserNameResponse(struct soap *soap, struct __ERMClientService1__getUserByUserNameResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__getUserByUserNameResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__updateLastAccessedTime
#define SOAP_TYPE_ERMClientService___ERMClientService1__updateLastAccessedTime (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__updateLastAccessedTime(struct soap*, struct __ERMClientService1__updateLastAccessedTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__updateLastAccessedTime(struct soap*, const struct __ERMClientService1__updateLastAccessedTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__updateLastAccessedTime(struct soap*, const char*, int, const struct __ERMClientService1__updateLastAccessedTime *, const char*);
SOAP_FMAC3 struct __ERMClientService1__updateLastAccessedTime * SOAP_FMAC4 soap_in___ERMClientService1__updateLastAccessedTime(struct soap*, const char*, struct __ERMClientService1__updateLastAccessedTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__updateLastAccessedTime(struct soap*, const struct __ERMClientService1__updateLastAccessedTime *, const char*, const char*);

#ifndef soap_write___ERMClientService1__updateLastAccessedTime
#define soap_write___ERMClientService1__updateLastAccessedTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__updateLastAccessedTime(soap, data),0) || ERMClientService::soap_put___ERMClientService1__updateLastAccessedTime(soap, data, "-ERMClientService1:updateLastAccessedTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__updateLastAccessedTime * SOAP_FMAC4 soap_get___ERMClientService1__updateLastAccessedTime(struct soap*, struct __ERMClientService1__updateLastAccessedTime *, const char*, const char*);

#ifndef soap_read___ERMClientService1__updateLastAccessedTime
#define soap_read___ERMClientService1__updateLastAccessedTime(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__updateLastAccessedTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__updateLastAccessedTime * SOAP_FMAC2 soap_instantiate___ERMClientService1__updateLastAccessedTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__updateLastAccessedTime * soap_new___ERMClientService1__updateLastAccessedTime(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__updateLastAccessedTime(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__updateLastAccessedTime * soap_new_req___ERMClientService1__updateLastAccessedTime(struct soap *soap, std::string& ERMClientService1__updateLastAccessedTime) { struct __ERMClientService1__updateLastAccessedTime *_p = soap_instantiate___ERMClientService1__updateLastAccessedTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__updateLastAccessedTime(soap, _p); _p->ERMClientService1__updateLastAccessedTime = ERMClientService1__updateLastAccessedTime; } return _p; }

inline struct __ERMClientService1__updateLastAccessedTime * soap_new_set___ERMClientService1__updateLastAccessedTime(struct soap *soap, std::string& ERMClientService1__updateLastAccessedTime) { struct __ERMClientService1__updateLastAccessedTime *_p = soap_instantiate___ERMClientService1__updateLastAccessedTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__updateLastAccessedTime(soap, _p); _p->ERMClientService1__updateLastAccessedTime = ERMClientService1__updateLastAccessedTime; } return _p; }

inline void soap_delete___ERMClientService1__updateLastAccessedTime(struct soap *soap, struct __ERMClientService1__updateLastAccessedTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__updateLastAccessedTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__updateLastAccessedTimeResponse
#define SOAP_TYPE_ERMClientService___ERMClientService1__updateLastAccessedTimeResponse (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, struct __ERMClientService1__updateLastAccessedTimeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, const struct __ERMClientService1__updateLastAccessedTimeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, const char*, int, const struct __ERMClientService1__updateLastAccessedTimeResponse *, const char*);
SOAP_FMAC3 struct __ERMClientService1__updateLastAccessedTimeResponse * SOAP_FMAC4 soap_in___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, const char*, struct __ERMClientService1__updateLastAccessedTimeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, const struct __ERMClientService1__updateLastAccessedTimeResponse *, const char*, const char*);

#ifndef soap_write___ERMClientService1__updateLastAccessedTimeResponse
#define soap_write___ERMClientService1__updateLastAccessedTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__updateLastAccessedTimeResponse(soap, data),0) || ERMClientService::soap_put___ERMClientService1__updateLastAccessedTimeResponse(soap, data, "-ERMClientService1:updateLastAccessedTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__updateLastAccessedTimeResponse * SOAP_FMAC4 soap_get___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, struct __ERMClientService1__updateLastAccessedTimeResponse *, const char*, const char*);

#ifndef soap_read___ERMClientService1__updateLastAccessedTimeResponse
#define soap_read___ERMClientService1__updateLastAccessedTimeResponse(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__updateLastAccessedTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__updateLastAccessedTimeResponse * SOAP_FMAC2 soap_instantiate___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__updateLastAccessedTimeResponse * soap_new___ERMClientService1__updateLastAccessedTimeResponse(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__updateLastAccessedTimeResponse(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__updateLastAccessedTimeResponse * soap_new_req___ERMClientService1__updateLastAccessedTimeResponse(struct soap *soap, std::string& ERMClientService1__updateLastAccessedTimeResponse) { struct __ERMClientService1__updateLastAccessedTimeResponse *_p = soap_instantiate___ERMClientService1__updateLastAccessedTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__updateLastAccessedTimeResponse(soap, _p); _p->ERMClientService1__updateLastAccessedTimeResponse = ERMClientService1__updateLastAccessedTimeResponse; } return _p; }

inline struct __ERMClientService1__updateLastAccessedTimeResponse * soap_new_set___ERMClientService1__updateLastAccessedTimeResponse(struct soap *soap, std::string& ERMClientService1__updateLastAccessedTimeResponse) { struct __ERMClientService1__updateLastAccessedTimeResponse *_p = soap_instantiate___ERMClientService1__updateLastAccessedTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__updateLastAccessedTimeResponse(soap, _p); _p->ERMClientService1__updateLastAccessedTimeResponse = ERMClientService1__updateLastAccessedTimeResponse; } return _p; }

inline void soap_delete___ERMClientService1__updateLastAccessedTimeResponse(struct soap *soap, struct __ERMClientService1__updateLastAccessedTimeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__updateLastAccessedTimeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__logout
#define SOAP_TYPE_ERMClientService___ERMClientService1__logout (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__logout(struct soap*, struct __ERMClientService1__logout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__logout(struct soap*, const struct __ERMClientService1__logout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__logout(struct soap*, const char*, int, const struct __ERMClientService1__logout *, const char*);
SOAP_FMAC3 struct __ERMClientService1__logout * SOAP_FMAC4 soap_in___ERMClientService1__logout(struct soap*, const char*, struct __ERMClientService1__logout *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__logout(struct soap*, const struct __ERMClientService1__logout *, const char*, const char*);

#ifndef soap_write___ERMClientService1__logout
#define soap_write___ERMClientService1__logout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__logout(soap, data),0) || ERMClientService::soap_put___ERMClientService1__logout(soap, data, "-ERMClientService1:logout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__logout * SOAP_FMAC4 soap_get___ERMClientService1__logout(struct soap*, struct __ERMClientService1__logout *, const char*, const char*);

#ifndef soap_read___ERMClientService1__logout
#define soap_read___ERMClientService1__logout(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__logout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__logout * SOAP_FMAC2 soap_instantiate___ERMClientService1__logout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__logout * soap_new___ERMClientService1__logout(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__logout(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__logout * soap_new_req___ERMClientService1__logout(struct soap *soap, std::string& ERMClientService1__logout) { struct __ERMClientService1__logout *_p = soap_instantiate___ERMClientService1__logout(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__logout(soap, _p); _p->ERMClientService1__logout = ERMClientService1__logout; } return _p; }

inline struct __ERMClientService1__logout * soap_new_set___ERMClientService1__logout(struct soap *soap, std::string& ERMClientService1__logout) { struct __ERMClientService1__logout *_p = soap_instantiate___ERMClientService1__logout(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__logout(soap, _p); _p->ERMClientService1__logout = ERMClientService1__logout; } return _p; }

inline void soap_delete___ERMClientService1__logout(struct soap *soap, struct __ERMClientService1__logout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__logout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__logoutResponse
#define SOAP_TYPE_ERMClientService___ERMClientService1__logoutResponse (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__logoutResponse(struct soap*, struct __ERMClientService1__logoutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__logoutResponse(struct soap*, const struct __ERMClientService1__logoutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__logoutResponse(struct soap*, const char*, int, const struct __ERMClientService1__logoutResponse *, const char*);
SOAP_FMAC3 struct __ERMClientService1__logoutResponse * SOAP_FMAC4 soap_in___ERMClientService1__logoutResponse(struct soap*, const char*, struct __ERMClientService1__logoutResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__logoutResponse(struct soap*, const struct __ERMClientService1__logoutResponse *, const char*, const char*);

#ifndef soap_write___ERMClientService1__logoutResponse
#define soap_write___ERMClientService1__logoutResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__logoutResponse(soap, data),0) || ERMClientService::soap_put___ERMClientService1__logoutResponse(soap, data, "-ERMClientService1:logoutResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__logoutResponse * SOAP_FMAC4 soap_get___ERMClientService1__logoutResponse(struct soap*, struct __ERMClientService1__logoutResponse *, const char*, const char*);

#ifndef soap_read___ERMClientService1__logoutResponse
#define soap_read___ERMClientService1__logoutResponse(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__logoutResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__logoutResponse * SOAP_FMAC2 soap_instantiate___ERMClientService1__logoutResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__logoutResponse * soap_new___ERMClientService1__logoutResponse(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__logoutResponse(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__logoutResponse * soap_new_req___ERMClientService1__logoutResponse(struct soap *soap, std::string& ERMClientService1__logoutResponse) { struct __ERMClientService1__logoutResponse *_p = soap_instantiate___ERMClientService1__logoutResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__logoutResponse(soap, _p); _p->ERMClientService1__logoutResponse = ERMClientService1__logoutResponse; } return _p; }

inline struct __ERMClientService1__logoutResponse * soap_new_set___ERMClientService1__logoutResponse(struct soap *soap, std::string& ERMClientService1__logoutResponse) { struct __ERMClientService1__logoutResponse *_p = soap_instantiate___ERMClientService1__logoutResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__logoutResponse(soap, _p); _p->ERMClientService1__logoutResponse = ERMClientService1__logoutResponse; } return _p; }

inline void soap_delete___ERMClientService1__logoutResponse(struct soap *soap, struct __ERMClientService1__logoutResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__logoutResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__dologin
#define SOAP_TYPE_ERMClientService___ERMClientService1__dologin (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__dologin(struct soap*, struct __ERMClientService1__dologin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__dologin(struct soap*, const struct __ERMClientService1__dologin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__dologin(struct soap*, const char*, int, const struct __ERMClientService1__dologin *, const char*);
SOAP_FMAC3 struct __ERMClientService1__dologin * SOAP_FMAC4 soap_in___ERMClientService1__dologin(struct soap*, const char*, struct __ERMClientService1__dologin *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__dologin(struct soap*, const struct __ERMClientService1__dologin *, const char*, const char*);

#ifndef soap_write___ERMClientService1__dologin
#define soap_write___ERMClientService1__dologin(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__dologin(soap, data),0) || ERMClientService::soap_put___ERMClientService1__dologin(soap, data, "-ERMClientService1:dologin", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__dologin * SOAP_FMAC4 soap_get___ERMClientService1__dologin(struct soap*, struct __ERMClientService1__dologin *, const char*, const char*);

#ifndef soap_read___ERMClientService1__dologin
#define soap_read___ERMClientService1__dologin(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__dologin(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__dologin * SOAP_FMAC2 soap_instantiate___ERMClientService1__dologin(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__dologin * soap_new___ERMClientService1__dologin(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__dologin(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__dologin * soap_new_req___ERMClientService1__dologin(struct soap *soap, std::string& ERMClientService1__dologin) { struct __ERMClientService1__dologin *_p = soap_instantiate___ERMClientService1__dologin(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__dologin(soap, _p); _p->ERMClientService1__dologin = ERMClientService1__dologin; } return _p; }

inline struct __ERMClientService1__dologin * soap_new_set___ERMClientService1__dologin(struct soap *soap, std::string& ERMClientService1__dologin) { struct __ERMClientService1__dologin *_p = soap_instantiate___ERMClientService1__dologin(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__dologin(soap, _p); _p->ERMClientService1__dologin = ERMClientService1__dologin; } return _p; }

inline void soap_delete___ERMClientService1__dologin(struct soap *soap, struct __ERMClientService1__dologin *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__dologin(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ERMClientService___ERMClientService1__dologinResponse
#define SOAP_TYPE_ERMClientService___ERMClientService1__dologinResponse (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ERMClientService1__dologinResponse(struct soap*, struct __ERMClientService1__dologinResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ERMClientService1__dologinResponse(struct soap*, const struct __ERMClientService1__dologinResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ERMClientService1__dologinResponse(struct soap*, const char*, int, const struct __ERMClientService1__dologinResponse *, const char*);
SOAP_FMAC3 struct __ERMClientService1__dologinResponse * SOAP_FMAC4 soap_in___ERMClientService1__dologinResponse(struct soap*, const char*, struct __ERMClientService1__dologinResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ERMClientService1__dologinResponse(struct soap*, const struct __ERMClientService1__dologinResponse *, const char*, const char*);

#ifndef soap_write___ERMClientService1__dologinResponse
#define soap_write___ERMClientService1__dologinResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize___ERMClientService1__dologinResponse(soap, data),0) || ERMClientService::soap_put___ERMClientService1__dologinResponse(soap, data, "-ERMClientService1:dologinResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ERMClientService1__dologinResponse * SOAP_FMAC4 soap_get___ERMClientService1__dologinResponse(struct soap*, struct __ERMClientService1__dologinResponse *, const char*, const char*);

#ifndef soap_read___ERMClientService1__dologinResponse
#define soap_read___ERMClientService1__dologinResponse(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get___ERMClientService1__dologinResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ERMClientService1__dologinResponse * SOAP_FMAC2 soap_instantiate___ERMClientService1__dologinResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ERMClientService1__dologinResponse * soap_new___ERMClientService1__dologinResponse(struct soap *soap, int n = -1) { return soap_instantiate___ERMClientService1__dologinResponse(soap, n, NULL, NULL, NULL); }

inline struct __ERMClientService1__dologinResponse * soap_new_req___ERMClientService1__dologinResponse(struct soap *soap, std::string& ERMClientService1__dologinResponse) { struct __ERMClientService1__dologinResponse *_p = soap_instantiate___ERMClientService1__dologinResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__dologinResponse(soap, _p); _p->ERMClientService1__dologinResponse = ERMClientService1__dologinResponse; } return _p; }

inline struct __ERMClientService1__dologinResponse * soap_new_set___ERMClientService1__dologinResponse(struct soap *soap, std::string& ERMClientService1__dologinResponse) { struct __ERMClientService1__dologinResponse *_p = soap_instantiate___ERMClientService1__dologinResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ERMClientService1__dologinResponse(soap, _p); _p->ERMClientService1__dologinResponse = ERMClientService1__dologinResponse; } return _p; }

inline void soap_delete___ERMClientService1__dologinResponse(struct soap *soap, struct __ERMClientService1__dologinResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ERMClientService1__dologinResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_ERMClientService_PointerToSOAP_ENV__Reason (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || ERMClientService::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_ERMClientService_PointerToSOAP_ENV__Detail (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || ERMClientService::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ERMClientService_PointerToSOAP_ENV__Code
#define SOAP_TYPE_ERMClientService_PointerToSOAP_ENV__Code (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || ERMClientService::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_ERMClientService__QName
#define SOAP_TYPE_ERMClientService__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize__QName(soap, data),0) || ERMClientService::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ERMClientService_string
#define SOAP_TYPE_ERMClientService_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ERMClientService::soap_serialize_string(soap, data),0) || ERMClientService::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !ERMClientService::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


} // namespace ERMClientService


#endif

/* End of ERMClientServiceH.h */
