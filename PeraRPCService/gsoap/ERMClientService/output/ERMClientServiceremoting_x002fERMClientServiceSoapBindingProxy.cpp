/* ERMClientServiceremoting_x002fERMClientServiceSoapBindingProxy.cpp
   Generated by gSOAP 2.8.17r from ERMClientService.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "ERMClientServiceremoting_x002fERMClientServiceSoapBindingProxy.h"

namespace ERMClientService {

remoting_x002fERMClientServiceSoapBindingProxy::remoting_x002fERMClientServiceSoapBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	remoting_x002fERMClientServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

remoting_x002fERMClientServiceSoapBindingProxy::remoting_x002fERMClientServiceSoapBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	remoting_x002fERMClientServiceSoapBindingProxy_init(_soap->imode, _soap->omode);
}

remoting_x002fERMClientServiceSoapBindingProxy::remoting_x002fERMClientServiceSoapBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	remoting_x002fERMClientServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

remoting_x002fERMClientServiceSoapBindingProxy::remoting_x002fERMClientServiceSoapBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	remoting_x002fERMClientServiceSoapBindingProxy_init(iomode, iomode);
}

remoting_x002fERMClientServiceSoapBindingProxy::remoting_x002fERMClientServiceSoapBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	remoting_x002fERMClientServiceSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

remoting_x002fERMClientServiceSoapBindingProxy::remoting_x002fERMClientServiceSoapBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	remoting_x002fERMClientServiceSoapBindingProxy_init(imode, omode);
}

remoting_x002fERMClientServiceSoapBindingProxy::~remoting_x002fERMClientServiceSoapBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void remoting_x002fERMClientServiceSoapBindingProxy::remoting_x002fERMClientServiceSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ERMClientService1", "http://remoting.erm.norteksoft.com", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void remoting_x002fERMClientServiceSoapBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void remoting_x002fERMClientServiceSoapBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	remoting_x002fERMClientServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void remoting_x002fERMClientServiceSoapBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *remoting_x002fERMClientServiceSoapBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *remoting_x002fERMClientServiceSoapBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *remoting_x002fERMClientServiceSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *remoting_x002fERMClientServiceSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int remoting_x002fERMClientServiceSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int remoting_x002fERMClientServiceSoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void remoting_x002fERMClientServiceSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void remoting_x002fERMClientServiceSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *remoting_x002fERMClientServiceSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int remoting_x002fERMClientServiceSoapBindingProxy::dologin(const char *endpoint, const char *soap_action, std::string ERMClientService1__dologin, std::string &ERMClientService1__dologinResponse)
{	struct soap *soap = this->soap;
	struct __ERMClientService1__dologin soap_tmp___ERMClientService1__dologin;
	struct __ERMClientService1__dologinResponse *soap_tmp___ERMClientService1__dologinResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.50.165/portal/remoting/ERMClientService";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ERMClientService1__dologin.ERMClientService1__dologin = ERMClientService1__dologin;
	soap_serializeheader(soap);
	soap_serialize___ERMClientService1__dologin(soap, &soap_tmp___ERMClientService1__dologin);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ERMClientService1__dologin(soap, &soap_tmp___ERMClientService1__dologin, "-ERMClientService1:dologin", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ERMClientService1__dologin(soap, &soap_tmp___ERMClientService1__dologin, "-ERMClientService1:dologin", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ERMClientService1__dologinResponse)
		return soap_closesock(soap);
	soap_default_std__string(soap, &ERMClientService1__dologinResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ERMClientService1__dologinResponse = soap_get___ERMClientService1__dologinResponse(soap, NULL, "-ERMClientService1:dologinResponse", "xsd:string");
	if (!soap_tmp___ERMClientService1__dologinResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ERMClientService1__dologinResponse = soap_tmp___ERMClientService1__dologinResponse->ERMClientService1__dologinResponse;
	return soap_closesock(soap);
}

int remoting_x002fERMClientServiceSoapBindingProxy::logout(const char *endpoint, const char *soap_action, std::string ERMClientService1__logout, std::string &ERMClientService1__logoutResponse)
{	struct soap *soap = this->soap;
	struct __ERMClientService1__logout soap_tmp___ERMClientService1__logout;
	struct __ERMClientService1__logoutResponse *soap_tmp___ERMClientService1__logoutResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.50.165/portal/remoting/ERMClientService";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ERMClientService1__logout.ERMClientService1__logout = ERMClientService1__logout;
	soap_serializeheader(soap);
	soap_serialize___ERMClientService1__logout(soap, &soap_tmp___ERMClientService1__logout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ERMClientService1__logout(soap, &soap_tmp___ERMClientService1__logout, "-ERMClientService1:logout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ERMClientService1__logout(soap, &soap_tmp___ERMClientService1__logout, "-ERMClientService1:logout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ERMClientService1__logoutResponse)
		return soap_closesock(soap);
	soap_default_std__string(soap, &ERMClientService1__logoutResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ERMClientService1__logoutResponse = soap_get___ERMClientService1__logoutResponse(soap, NULL, "-ERMClientService1:logoutResponse", "xsd:string");
	if (!soap_tmp___ERMClientService1__logoutResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ERMClientService1__logoutResponse = soap_tmp___ERMClientService1__logoutResponse->ERMClientService1__logoutResponse;
	return soap_closesock(soap);
}

int remoting_x002fERMClientServiceSoapBindingProxy::updateLastAccessedTime(const char *endpoint, const char *soap_action, std::string ERMClientService1__updateLastAccessedTime, std::string &ERMClientService1__updateLastAccessedTimeResponse)
{	struct soap *soap = this->soap;
	struct __ERMClientService1__updateLastAccessedTime soap_tmp___ERMClientService1__updateLastAccessedTime;
	struct __ERMClientService1__updateLastAccessedTimeResponse *soap_tmp___ERMClientService1__updateLastAccessedTimeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.50.165/portal/remoting/ERMClientService";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ERMClientService1__updateLastAccessedTime.ERMClientService1__updateLastAccessedTime = ERMClientService1__updateLastAccessedTime;
	soap_serializeheader(soap);
	soap_serialize___ERMClientService1__updateLastAccessedTime(soap, &soap_tmp___ERMClientService1__updateLastAccessedTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ERMClientService1__updateLastAccessedTime(soap, &soap_tmp___ERMClientService1__updateLastAccessedTime, "-ERMClientService1:updateLastAccessedTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ERMClientService1__updateLastAccessedTime(soap, &soap_tmp___ERMClientService1__updateLastAccessedTime, "-ERMClientService1:updateLastAccessedTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ERMClientService1__updateLastAccessedTimeResponse)
		return soap_closesock(soap);
	soap_default_std__string(soap, &ERMClientService1__updateLastAccessedTimeResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ERMClientService1__updateLastAccessedTimeResponse = soap_get___ERMClientService1__updateLastAccessedTimeResponse(soap, NULL, "-ERMClientService1:updateLastAccessedTimeResponse", "xsd:string");
	if (!soap_tmp___ERMClientService1__updateLastAccessedTimeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ERMClientService1__updateLastAccessedTimeResponse = soap_tmp___ERMClientService1__updateLastAccessedTimeResponse->ERMClientService1__updateLastAccessedTimeResponse;
	return soap_closesock(soap);
}

int remoting_x002fERMClientServiceSoapBindingProxy::getUserByUserName(const char *endpoint, const char *soap_action, std::string ERMClientService1__getUserByUserName, std::string &ERMClientService1__getUserByUserNameResponse)
{	struct soap *soap = this->soap;
	struct __ERMClientService1__getUserByUserName soap_tmp___ERMClientService1__getUserByUserName;
	struct __ERMClientService1__getUserByUserNameResponse *soap_tmp___ERMClientService1__getUserByUserNameResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.50.165/portal/remoting/ERMClientService";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ERMClientService1__getUserByUserName.ERMClientService1__getUserByUserName = ERMClientService1__getUserByUserName;
	soap_serializeheader(soap);
	soap_serialize___ERMClientService1__getUserByUserName(soap, &soap_tmp___ERMClientService1__getUserByUserName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ERMClientService1__getUserByUserName(soap, &soap_tmp___ERMClientService1__getUserByUserName, "-ERMClientService1:getUserByUserName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ERMClientService1__getUserByUserName(soap, &soap_tmp___ERMClientService1__getUserByUserName, "-ERMClientService1:getUserByUserName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ERMClientService1__getUserByUserNameResponse)
		return soap_closesock(soap);
	soap_default_std__string(soap, &ERMClientService1__getUserByUserNameResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ERMClientService1__getUserByUserNameResponse = soap_get___ERMClientService1__getUserByUserNameResponse(soap, NULL, "-ERMClientService1:getUserByUserNameResponse", "xsd:string");
	if (!soap_tmp___ERMClientService1__getUserByUserNameResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ERMClientService1__getUserByUserNameResponse = soap_tmp___ERMClientService1__getUserByUserNameResponse->ERMClientService1__getUserByUserNameResponse;
	return soap_closesock(soap);
}

} // namespace ERMClientService

/* End of client proxy code */
